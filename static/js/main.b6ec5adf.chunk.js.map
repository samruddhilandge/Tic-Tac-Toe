{"version":3,"sources":["logo.svg","components/Square.js","components/Header.js","components/Board.js","components/RestartButton.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Square","props","color1","value","className","onClick","style","color","Header","fontFamily","Board","state","squares","Array","fill","xIsNext","findWinner","bind","i","this","handleClick","slice","setState","lines","length","a","b","c","status","x_bgcolor","o_bgcolor","x_color","o_color","winner","includes","height","width","backgroundColor","renderSquare","Component","RestartButton","restart","window","location","reload","App","position","bottom","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b6ec5adf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React,{Component} from 'react';\r\n\r\nexport default function Square(props){\r\n    var color1;\r\n        if(props.value==='X'){\r\n            color1='red';\r\n        }\r\n        else\r\n            color1='darkblue';\r\n        return(\r\n            <button className=\"square\"\r\n             onClick={props.onClick}>\r\n                <span style={{color:color1}}>{props.value}</span>\r\n            </button>\r\n        )\r\n}\r\n\r\n","import React from 'react';\r\nimport '../App.css';\r\n\r\nexport default function Header(){\r\n\r\n    return( \r\n        <div>\r\n            <h1 className=\"header\" style={{ fontFamily:'calibri'}}>TIC TAC TOE</h1>\r\n        </div>  \r\n    )\r\n}","import React,{Component} from 'react';\r\nimport Square from './Square';\r\nimport '../App.css';\r\nimport Header from './Header';\r\n\r\nclass Board extends Component{\r\n\r\n    constructor(props){\r\n\r\n        super(props);\r\n        this.state={\r\n            squares:Array(9).fill(null),\r\n            xIsNext:true\r\n        }\r\n        this.findWinner=this.findWinner.bind(this);\r\n    }\r\n    renderSquare(i){\r\n        return(\r\n            <Square value={this.state.squares[i]}\r\n            onClick={()=>this.handleClick(i)} />\r\n        );\r\n    }\r\n    handleClick(i){\r\n        const squares=this.state.squares.slice();\r\n        if (this.findWinner(squares) || squares[i]) {\r\n            return;\r\n          }\r\n        squares[i]=this.state.xIsNext? 'X': 'O';\r\n        this.setState({\r\n            squares,\r\n            xIsNext:!this.state.xIsNext\r\n        })\r\n        //console.log(\"squares:\", this.state.squares)\r\n\r\n    }\r\n    findWinner(squares){\r\n        const lines=[\r\n            [0,4,8],\r\n            [0,1,2],\r\n            [6,7,8],\r\n            [1,4,7],\r\n            [2,5,8],\r\n            [0,3,6],\r\n            [2,4,6],\r\n            [3,4,5],\r\n        ];\r\n        for(let i=0;i<lines.length;i++){\r\n            const [a,b,c]=lines[i];\r\n            if(squares[a] && squares[a]===squares[b]&&squares[a]===squares[c]){\r\n                return squares[a];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    render(){\r\n        \r\n        const winner= this.findWinner(this.state.squares);\r\n        let status;\r\n        let x_bgcolor,o_bgcolor,x_color,o_color;\r\n        \r\n        if(winner){\r\n            status=winner+' WON!';\r\n        }\r\n        else{\r\n            status=' ';\r\n            x_bgcolor=this.state.xIsNext?'#555555':'#ffffff';\r\n            x_color=this.state.xIsNext?'#ffffff':'#555555';\r\n            o_bgcolor=this.state.xIsNext?'#ffffff':'#555555';\r\n            o_color=this.state.xIsNext?'#555555':'#ffffff';\r\n        }\r\n        if((!this.state.squares.includes(null))&&(!winner)){\r\n            status='GAME OVER!';\r\n        }\r\n        return(\r\n        <div className=\"game\">\r\n            <div className=\"statusBar\">  \r\n                <button className=\"statusButton\" style={{ height:'50px',width:'50%',backgroundColor:x_bgcolor,color:x_color}}>Player: X</button>\r\n                <button className=\"statusButton\" style={{ height:'50px',width:'50%',backgroundColor:o_bgcolor,color:o_color}}>Player: O</button>\r\n            </div>\r\n            <Header/>\r\n             <div className=\"board\">\r\n                <div className=\"status\">\r\n                    <h3>{status}</h3>\r\n                </div><br/><br/><br/>\r\n                <div className=\"board-row\">\r\n                        {this.renderSquare(0)}\r\n                        {this.renderSquare(1)}\r\n                        {this.renderSquare(2)}  \r\n                </div>\r\n                <div className=\"board-row\">\r\n                    {this.renderSquare(3)}\r\n                    {this.renderSquare(4)}\r\n                    {this.renderSquare(5)}\r\n                </div>\r\n                <div className=\"board-row\">\r\n                    {this.renderSquare(6)}\r\n                    {this.renderSquare(7)}\r\n                    {this.renderSquare(8)}\r\n                </div>\r\n             </div>\r\n        </div>\r\n        );\r\n\r\n    }\r\n}\r\n\r\nexport default Board;\r\n\r\n","import React,{Component} from 'react';\r\n\r\nclass RestartButton extends Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.restart=this.restart.bind(this);\r\n    }\r\n\r\n    restart=()=>{\r\n        window.location.reload();\r\n        //console.log(\"in restart button\")\r\n    }\r\n     render(){\r\n    return(\r\n        <div>\r\n            <button className=\"restartButton\"  onClick={this.restart}>\r\n                Restart\r\n            </button>\r\n         </div>\r\n        \r\n    );\r\n    }\r\n}\r\n\r\nexport default RestartButton;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Board from './components/Board';\n\nimport RestartButton from './components/RestartButton';\n\n\nfunction App() {\n  return (\n    <div>\n      \n      <Board />  \n      <div style={{position:'fixed',bottom:0,width:'100%'}}>\n        <RestartButton/>\n      </div>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}